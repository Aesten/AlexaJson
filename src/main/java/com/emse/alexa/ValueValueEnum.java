package com.emse.alexa;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.io.IOException;

public enum ValueValueEnum {
    AIR_FRY, ALARM, AL_DENTE, BAKE, BLANCH, BOIL, BREW, BROIL, BROWN, CAN, CONVECTION_BAKE, CONVECTION_BROIL, CONVECTION_ROAST, CONVECTION_STEAM, CREAMY, CRISPY, CURE, CUSTOM, DEFROST, DEHYDRATE, DETECTED, DRY, FERMENT, FIRM, FLAKY, FRY, GRILL, HARD, HIGH, INCUBATE, JUICY, LOW, MEDIUM, MEDIUM_RARE, MEDIUM_WELL, MELT, MOIST, NOT_DETECTED, OFF, OK, OPAQUE, OVERCOOKED, PRESET, PRESSURE, PROOF, RARE, REHEAT, ROAST, RUNNY, SAUTE, SEAR, SIMMER, SLOW_COOK, SMOKE, SMOOTH, SOFT, SOFTEN, SOUS_VIDE, SPRINGY, STEAM, STERILIZE, STEW, STIR_FRY, SUCCULENT, TENDER, TIMECOOK, TOAST, UNDERCOOKED, UNREACHABLE, VELVETY, WARM, WELL_DONE;

    @JsonValue
    public String toValue() {
        return switch (this) {
            case AIR_FRY -> "AIR_FRY";
            case ALARM -> "ALARM";
            case AL_DENTE -> "AL_DENTE";
            case BAKE -> "BAKE";
            case BLANCH -> "BLANCH";
            case BOIL -> "BOIL";
            case BREW -> "BREW";
            case BROIL -> "BROIL";
            case BROWN -> "BROWN";
            case CAN -> "CAN";
            case CONVECTION_BAKE -> "CONVECTION_BAKE";
            case CONVECTION_BROIL -> "CONVECTION_BROIL";
            case CONVECTION_ROAST -> "CONVECTION_ROAST";
            case CONVECTION_STEAM -> "CONVECTION_STEAM";
            case CREAMY -> "CREAMY";
            case CRISPY -> "CRISPY";
            case CURE -> "CURE";
            case CUSTOM -> "CUSTOM";
            case DEFROST -> "DEFROST";
            case DEHYDRATE -> "DEHYDRATE";
            case DETECTED -> "DETECTED";
            case DRY -> "DRY";
            case FERMENT -> "FERMENT";
            case FIRM -> "FIRM";
            case FLAKY -> "FLAKY";
            case FRY -> "FRY";
            case GRILL -> "GRILL";
            case HARD -> "HARD";
            case HIGH -> "HIGH";
            case INCUBATE -> "INCUBATE";
            case JUICY -> "JUICY";
            case LOW -> "LOW";
            case MEDIUM -> "MEDIUM";
            case MEDIUM_RARE -> "MEDIUM_RARE";
            case MEDIUM_WELL -> "MEDIUM_WELL";
            case MELT -> "MELT";
            case MOIST -> "MOIST";
            case NOT_DETECTED -> "NOT_DETECTED";
            case OFF -> "OFF";
            case OK -> "OK";
            case OPAQUE -> "OPAQUE";
            case OVERCOOKED -> "OVERCOOKED";
            case PRESET -> "PRESET";
            case PRESSURE -> "PRESSURE";
            case PROOF -> "PROOF";
            case RARE -> "RARE";
            case REHEAT -> "REHEAT";
            case ROAST -> "ROAST";
            case RUNNY -> "RUNNY";
            case SAUTE -> "SAUTE";
            case SEAR -> "SEAR";
            case SIMMER -> "SIMMER";
            case SLOW_COOK -> "SLOW_COOK";
            case SMOKE -> "SMOKE";
            case SMOOTH -> "SMOOTH";
            case SOFT -> "SOFT";
            case SOFTEN -> "SOFTEN";
            case SOUS_VIDE -> "SOUS_VIDE";
            case SPRINGY -> "SPRINGY";
            case STEAM -> "STEAM";
            case STERILIZE -> "STERILIZE";
            case STEW -> "STEW";
            case STIR_FRY -> "STIR_FRY";
            case SUCCULENT -> "SUCCULENT";
            case TENDER -> "TENDER";
            case TIMECOOK -> "TIMECOOK";
            case TOAST -> "TOAST";
            case UNDERCOOKED -> "UNDERCOOKED";
            case UNREACHABLE -> "UNREACHABLE";
            case VELVETY -> "VELVETY";
            case WARM -> "WARM";
            case WELL_DONE -> "WELL_DONE";
        };
    }

    @JsonCreator
    public static ValueValueEnum forValue(String value) throws IOException {
        if (value.equals("AIR_FRY")) return AIR_FRY;
        if (value.equals("ALARM")) return ALARM;
        if (value.equals("AL_DENTE")) return AL_DENTE;
        if (value.equals("BAKE")) return BAKE;
        if (value.equals("BLANCH")) return BLANCH;
        if (value.equals("BOIL")) return BOIL;
        if (value.equals("BREW")) return BREW;
        if (value.equals("BROIL")) return BROIL;
        if (value.equals("BROWN")) return BROWN;
        if (value.equals("CAN")) return CAN;
        if (value.equals("CONVECTION_BAKE")) return CONVECTION_BAKE;
        if (value.equals("CONVECTION_BROIL")) return CONVECTION_BROIL;
        if (value.equals("CONVECTION_ROAST")) return CONVECTION_ROAST;
        if (value.equals("CONVECTION_STEAM")) return CONVECTION_STEAM;
        if (value.equals("CREAMY")) return CREAMY;
        if (value.equals("CRISPY")) return CRISPY;
        if (value.equals("CURE")) return CURE;
        if (value.equals("CUSTOM")) return CUSTOM;
        if (value.equals("DEFROST")) return DEFROST;
        if (value.equals("DEHYDRATE")) return DEHYDRATE;
        if (value.equals("DETECTED")) return DETECTED;
        if (value.equals("DRY")) return DRY;
        if (value.equals("FERMENT")) return FERMENT;
        if (value.equals("FIRM")) return FIRM;
        if (value.equals("FLAKY")) return FLAKY;
        if (value.equals("FRY")) return FRY;
        if (value.equals("GRILL")) return GRILL;
        if (value.equals("HARD")) return HARD;
        if (value.equals("HIGH")) return HIGH;
        if (value.equals("INCUBATE")) return INCUBATE;
        if (value.equals("JUICY")) return JUICY;
        if (value.equals("LOW")) return LOW;
        if (value.equals("MEDIUM")) return MEDIUM;
        if (value.equals("MEDIUM_RARE")) return MEDIUM_RARE;
        if (value.equals("MEDIUM_WELL")) return MEDIUM_WELL;
        if (value.equals("MELT")) return MELT;
        if (value.equals("MOIST")) return MOIST;
        if (value.equals("NOT_DETECTED")) return NOT_DETECTED;
        if (value.equals("OFF")) return OFF;
        if (value.equals("OK")) return OK;
        if (value.equals("OPAQUE")) return OPAQUE;
        if (value.equals("OVERCOOKED")) return OVERCOOKED;
        if (value.equals("PRESET")) return PRESET;
        if (value.equals("PRESSURE")) return PRESSURE;
        if (value.equals("PROOF")) return PROOF;
        if (value.equals("RARE")) return RARE;
        if (value.equals("REHEAT")) return REHEAT;
        if (value.equals("ROAST")) return ROAST;
        if (value.equals("RUNNY")) return RUNNY;
        if (value.equals("SAUTE")) return SAUTE;
        if (value.equals("SEAR")) return SEAR;
        if (value.equals("SIMMER")) return SIMMER;
        if (value.equals("SLOW_COOK")) return SLOW_COOK;
        if (value.equals("SMOKE")) return SMOKE;
        if (value.equals("SMOOTH")) return SMOOTH;
        if (value.equals("SOFT")) return SOFT;
        if (value.equals("SOFTEN")) return SOFTEN;
        if (value.equals("SOUS_VIDE")) return SOUS_VIDE;
        if (value.equals("SPRINGY")) return SPRINGY;
        if (value.equals("STEAM")) return STEAM;
        if (value.equals("STERILIZE")) return STERILIZE;
        if (value.equals("STEW")) return STEW;
        if (value.equals("STIR_FRY")) return STIR_FRY;
        if (value.equals("SUCCULENT")) return SUCCULENT;
        if (value.equals("TENDER")) return TENDER;
        if (value.equals("TIMECOOK")) return TIMECOOK;
        if (value.equals("TOAST")) return TOAST;
        if (value.equals("UNDERCOOKED")) return UNDERCOOKED;
        if (value.equals("UNREACHABLE")) return UNREACHABLE;
        if (value.equals("VELVETY")) return VELVETY;
        if (value.equals("WARM")) return WARM;
        if (value.equals("WELL_DONE")) return WELL_DONE;
        throw new IOException("Cannot deserialize ValueValueEnum");
    }
}
